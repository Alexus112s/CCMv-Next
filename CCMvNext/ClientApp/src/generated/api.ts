//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ApiInvokeService} from './api-invoke.service';
import { ICookieConsentRecord } from './models';
import { IConsentByDay } from './models';

@Injectable({ providedIn: 'root' }) export class CookieConsentsService extends ApiInvokeService
{
	public async get() : Promise<ICookieConsentRecord[]>
	{
		return super.getRequest('', {  });
	}
	public async getCookieConsentRecord(id: string) : Promise<ICookieConsentRecord>
	{
		return super.getRequest('{id}', { 'id': id });
	}
	public async post(record: ICookieConsentRecord) : Promise<ICookieConsentRecord>
	{
		return super.postRequest('', {  }, record);
	}
	public async put(id: string, record: ICookieConsentRecord) : Promise<void>
	{
		return super.putRequest('{id}', { 'id': id }, record);
	}
	public async delete(id: string) : Promise<void>
	{
		return super.deleteRequest('{id}', { 'id': id });
	}
	constructor (http: HttpClient)
	{
		super(http, 'CookieConsents');
	}
}
@Injectable({ providedIn: 'root' }) export class CookieConsentsReportingService extends ApiInvokeService
{
	public async getConsentRate(sinceDate: any, beforeDate: any) : Promise<IConsentByDay[]>
	{
		return super.getRequest('GetConsentRate', { 'sinceDate': sinceDate, 'beforeDate': beforeDate });
	}
	constructor (http: HttpClient)
	{
		super(http, 'CookieConsentsReporting');
	}
}
